// Mocks generated by Mockito 5.2.0 from annotations
// in training_clean_architecture/test/features/user_info/domain/usecases/user_info_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:training_clean_architecture/core/errors/failures.dart' as _i5;
import 'package:training_clean_architecture/features/user_info/domain/repositories/user_info_repository.dart'
    as _i2;
import 'package:training_clean_architecture/features/users_list/data/models/users_list_model.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [UserInfoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInfoRepository extends _i1.Mock
    implements _i2.UserInfoRepository {
  MockUserInfoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i5.Failure, bool>>? checkUserInfoInCache(
          _i6.UsersListResultsModel? usersListResultsModel) =>
      (super.noSuchMethod(
              Invocation.method(#checkUserInfoInCache, [usersListResultsModel]))
          as _i3.Future<_i4.Either<_i5.Failure, bool>>?);
  @override
  _i3.Future<_i4.Either<_i5.Failure, bool>>? updateUserInfoToCache(
          _i6.UsersListResultsModel? usersListResultsModel) =>
      (super.noSuchMethod(Invocation.method(
              #updateUserInfoToCache, [usersListResultsModel]))
          as _i3.Future<_i4.Either<_i5.Failure, bool>>?);
}
